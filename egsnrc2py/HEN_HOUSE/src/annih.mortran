SUBROUTINE ANNIH;
"                                                                  "
"******************************************************************"
"   GAMMA SPECTRUM FOR TWO GAMMA IN-FLIGHT POSITRON ANNIHILATION.  "
"   USING SCHEME BASED ON HEITLER'S P269-27O FORMULAE.             "
"                                                                  "
"   If the user requests radiative splitting (via nbr_split > 1),  "
"   this routine produces 2*nbr_split annihilation photons at once,"
"   each carying the fraction 1/nbr_split of the weight of the     "
"   incident positron.                                             "
"                                                                  "
"   Except for taking out the calculation of                       "
"   LOG((1.0-EP0)/EP0) out of the sampling loop and using a        "
"   rejection function normalized to its maximum, the sampling     "
"   technique is the same as the original EGS4 implementation.     "
"                                                                  "
"   I. Kawrakow, January 2000                                      "
"                                                                  "
"******************************************************************"
$IMPLICIT-NONE;

$COMIN-ANNIH;    "DEFAULT REPLACEMENT PRODUCES THE FOLLOWING:      "
                 "COMIN/DEBUG,STACK,UPHIOT,USEFUL,RANDOM,          "
                 "EGS-VARIANCE-REDUCTION/;                         "

$DEFINE-LOCAL-VARIABLES-ANNIH;
$INTEGER ip;

NPold = NP; "Set the old stack counter"
IF( nbr_split <= 0 ) [ return; ]
PAVIP=E(NP)+PRM; "PRECISE AVAILABLE ENERGY OF INCIDENT POSITRON,
                 "i.e. electron assumed to be at rest
AVIP=PAVIP;      "AVAILABLE ENERGY OF INCIDENT POSITRON"
A=AVIP/RM;
"AI=1.0/A;  AI not necessary, IK Oct 97"
G=A-1.0;
T=G-1.0;
P=SQRT(A*T);
POT=P/T;
EP0=1.0/(A+P);
"   SAMPLE 1/EP FROM EP=EP0 TO 1.0-EP0"
"Take the calculation of the logarithm out of the loop, IK Oct 97"
WSAMP=LOG((1.0-EP0)/EP0);

aa = u(np); bb = v(np); cc = w(np);
sinpsi = aa*aa + bb*bb;
IF( sinpsi > 1e-20 ) [
   sinpsi = sqrt(sinpsi);
   sindel = bb/sinpsi; cosdel = aa/sinpsi;
]

IF( nbr_split > 1 ) [ wt(np) = wt(np)/nbr_split; ]

DO ibr = 1,nbr_split [  "nbr_split > 1 means we want splitting for any"
                        "radiative event                              "

    IF( np+1 > $MXSTACK ) [
        $egs_fatal('(//a,i6,a//)',' Stack overflow in ANNIH! np = ',np+1,
                   ' Increase $MXSTACK and try again' );
    ]

    LOOP[
        $RANDOMSET RNNO01;
        EP=EP0*EXP(RNNO01*WSAMP);
        "   NOW DECIDE WHETHER TO ACCEPT"
        $RANDOMSET RNNO02;
        "REJF=1.0-EP+AI*AI*(2.0*G-1.0/EP);"
        "The above rejection function has a maximum = 1 - 2/A**2"
        "For efficiency, it is better to divide by the maximum value, IK Oct 97"
        REJF = 1 - (EP*A-1)**2/(EP*(A*A-2));
    ] UNTIL (RNNO02 <= REJF);


    "   SET UP ENERGIES"
    ESG1=AVIP*EP; "ENERGY OF SECONDARY GAMMA 1"
    PESG1=ESG1; "PRECISE ENERGY OF SECONDARY GAMMA 1"
    E(NP)=PESG1; IQ(NP)=0;
    IF( ibr = 1 ) [ ip = npold; ] ELSE [ ip = np-1; ]
    $TRANSFER PROPERTIES TO (np) FROM (ip);
    COSTHE=MAX(-1.0,MIN(1.0,(ESG1-RM)*POT/ESG1));
    SINTHE=SQRT(1.0-COSTHE*COSTHE);
    $SELECT-AZIMUTHAL-ANGLE(cphi,sphi);
    IF( sinpsi >= 1e-10 ) [
        us = sinthe*cphi; vs = sinthe*sphi;
        u(np) = cc*cosdel*us - sindel*vs + aa*costhe;
        v(np) = cc*sindel*us + cosdel*vs + bb*costhe;
        w(np) = cc*costhe - sinpsi*us;
    ]
    ELSE [
        u(np) = sinthe*cphi; v(np) = sinthe*sphi; w(np) = cc*costhe;
    ]
    np = np + 1;
    PESG2=PAVIP-PESG1; esg2 = pesg2;
    e(np) = pesg2; iq(np) = 0;
    $TRANSFER PROPERTIES TO (np) FROM (np-1);
    COSTHE=MAX(-1.0,MIN(1.0,(ESG2-RM)*POT/ESG2));
    SINTHE=-SQRT(1.0-COSTHE*COSTHE);
    IF( sinpsi >= 1e-10 ) [
        us = sinthe*cphi; vs = sinthe*sphi;
        u(np) = cc*cosdel*us - sindel*vs + aa*costhe;
        v(np) = cc*sindel*us + cosdel*vs + bb*costhe;
        w(np) = cc*costhe - sinpsi*us;
    ]
    ELSE [
        u(np) = sinthe*cphi; v(np) = sinthe*sphi; w(np) = cc*costhe;
    ]
    np = np + 1;

]
np = np-1;

RETURN;
"END OF SUBROUTINE ANNIH"   END;
